// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.17.2
// source: static.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// StaticServiceClient is the client API for StaticService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type StaticServiceClient interface {
	Stream(ctx context.Context, opts ...grpc.CallOption) (StaticService_StreamClient, error)
}

type staticServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewStaticServiceClient(cc grpc.ClientConnInterface) StaticServiceClient {
	return &staticServiceClient{cc}
}

func (c *staticServiceClient) Stream(ctx context.Context, opts ...grpc.CallOption) (StaticService_StreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &StaticService_ServiceDesc.Streams[0], "/proto.StaticService/Stream", opts...)
	if err != nil {
		return nil, err
	}
	x := &staticServiceStreamClient{stream}
	return x, nil
}

type StaticService_StreamClient interface {
	Send(*StaticRequest) error
	Recv() (*StaticResponse, error)
	grpc.ClientStream
}

type staticServiceStreamClient struct {
	grpc.ClientStream
}

func (x *staticServiceStreamClient) Send(m *StaticRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *staticServiceStreamClient) Recv() (*StaticResponse, error) {
	m := new(StaticResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// StaticServiceServer is the server API for StaticService service.
// All implementations must embed UnimplementedStaticServiceServer
// for forward compatibility
type StaticServiceServer interface {
	Stream(StaticService_StreamServer) error
	mustEmbedUnimplementedStaticServiceServer()
}

// UnimplementedStaticServiceServer must be embedded to have forward compatible implementations.
type UnimplementedStaticServiceServer struct {
}

func (UnimplementedStaticServiceServer) Stream(StaticService_StreamServer) error {
	return status.Errorf(codes.Unimplemented, "method Stream not implemented")
}
func (UnimplementedStaticServiceServer) mustEmbedUnimplementedStaticServiceServer() {}

// UnsafeStaticServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to StaticServiceServer will
// result in compilation errors.
type UnsafeStaticServiceServer interface {
	mustEmbedUnimplementedStaticServiceServer()
}

func RegisterStaticServiceServer(s grpc.ServiceRegistrar, srv StaticServiceServer) {
	s.RegisterService(&StaticService_ServiceDesc, srv)
}

func _StaticService_Stream_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(StaticServiceServer).Stream(&staticServiceStreamServer{stream})
}

type StaticService_StreamServer interface {
	Send(*StaticResponse) error
	Recv() (*StaticRequest, error)
	grpc.ServerStream
}

type staticServiceStreamServer struct {
	grpc.ServerStream
}

func (x *staticServiceStreamServer) Send(m *StaticResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *staticServiceStreamServer) Recv() (*StaticRequest, error) {
	m := new(StaticRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// StaticService_ServiceDesc is the grpc.ServiceDesc for StaticService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var StaticService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.StaticService",
	HandlerType: (*StaticServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Stream",
			Handler:       _StaticService_Stream_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "static.proto",
}
